import{_ as n,V as s,W as a,X as e}from"./framework-48406333.js";const t={},o=e(`<ul><li><a href="#1-casing-conventions">1. Casing conventions</a></li><li><a href="#2-variables">2. Variables</a><ul><li><a href="#21-variables-should-be-nouns">2.1. Variables should be nouns</a></li><li><a href="#22-iterables">2.2. iterables</a></li><li><a href="#23-key-values">2.3. key-values</a></li><li><a href="#24-bool">2.4. bool</a></li><li><a href="#25-%E6%8B%92%E7%BB%9D%E9%80%9A%E7%94%A8%E8%AF%8D">2.5. 拒绝通用词</a></li></ul></li><li><a href="#3-functions">3. Functions</a><ul><li><a href="#31-functions-should-be-verbs">3.1. Functions should be verbs</a></li><li><a href="#32-%E4%BD%BF%E7%94%A8%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD">3.2. 使用专业术语</a></li></ul></li><li><a href="#4-class">4. Class</a><ul><li><a href="#41-suffixes-are-fine">4.1. Suffixes are fine</a></li><li><a href="#42-when-to-create-a-function-or-a-class-in-python">4.2. When to create a function or a class in Python?</a></li></ul></li></ul><hr><h1 id="_1-casing-conventions" tabindex="-1"><a class="header-anchor" href="#_1-casing-conventions" aria-hidden="true">#</a> 1. Casing conventions</h1><p>naming conventions:</p><ul><li><p>Pascal case:</p><p>The first letter in the identifier and the first letter of each subsequent concatenated word are capitalized. For example: <code>BackColor</code>.</p></li><li><p>Camel case:</p><p>The first letter of an identifier is lowercase and the first letter of each subsequent concatenated word is capitalized. For example: <code>backColor</code></p></li><li><p>underscore:</p><p><code>back_color</code></p></li></ul><p>By default follow these naming conventions:</p><table><thead><tr><th>Type</th><th>Public</th><th>Private</th></tr></thead><tbody><tr><td>Packages(directories)</td><td><code>lower_with_under</code></td><td></td></tr><tr><td>Modules(files)</td><td><code>lower_with_under.py</code></td><td></td></tr><tr><td>Functions and methods</td><td><code>lower_with_under()</code></td><td><code>_lower_with_under()</code></td></tr><tr><td>Classes</td><td><code>CapWords</code></td><td></td></tr><tr><td>Constants</td><td><code>ALL_CAPS_UNDER</code></td><td><code>_ALL_CAPS_UNDER</code></td></tr></tbody></table><p>Disclaimer about &quot;private&quot;: Mark your private method/function with a single initial underscore to state it&#39;s intended for private use only and live with it.</p><h1 id="_2-variables" tabindex="-1"><a class="header-anchor" href="#_2-variables" aria-hidden="true">#</a> 2. Variables</h1><h2 id="_2-1-variables-should-be-nouns" tabindex="-1"><a class="header-anchor" href="#_2-1-variables-should-be-nouns" aria-hidden="true">#</a> 2.1. Variables should be nouns</h2><p>Should always be nouns, never verbs (which clarifies the difference between functions).</p><p>Good examples:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>plane <span class="token operator">=</span> Plane<span class="token punctuation">(</span><span class="token punctuation">)</span>
customer_id <span class="token operator">=</span> <span class="token number">5</span>
KEY_COMPARISON <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Bad examples:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>fly <span class="token operator">=</span> Plane<span class="token punctuation">(</span><span class="token punctuation">)</span>
get_customer_id <span class="token operator">=</span> <span class="token number">5</span>
COMPARE_KEY <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If your variable/constant is a list or collection, make it plural!</p><h2 id="_2-2-iterables" tabindex="-1"><a class="header-anchor" href="#_2-2-iterables" aria-hidden="true">#</a> 2.2. iterables</h2><p>plural</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>customer_ids <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">}</span>

users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Rocky&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;leey&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># Even if it contains only one item</span>
planes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> user <span class="token keyword">in</span> users<span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-key-values" tabindex="-1"><a class="header-anchor" href="#_2-3-key-values" aria-hidden="true">#</a> 2.3. key-values</h2><p>key-values</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>students_scores <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;Rocky&#39;</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
    <span class="token string">&#39;leey&#39;</span><span class="token punctuation">:</span> <span class="token number">60</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4-bool" tabindex="-1"><a class="header-anchor" href="#_2-4-bool" aria-hidden="true">#</a> 2.4. bool</h2><p>用 ‘has’ 或 ‘is’ 前缀命名 。</p><p>对于保存布尔值的变量，对其命名的时候将 ‘has’ 或 ‘is’ 作为其前缀，可以使它们在代码中的可读性更强：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>is_succeed <span class="token operator">=</span> <span class="token boolean">True</span>
has_cache <span class="token operator">=</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-拒绝通用词" tabindex="-1"><a class="header-anchor" href="#_2-5-拒绝通用词" aria-hidden="true">#</a> 2.5. 拒绝通用词</h2><p>1、写代码的时候，不管是全局变量还是局部变量，都应该避免使用 ‘list’、‘dict’、‘elements’ 等词作为变量名，它们会使代码变的难以阅读、理解。</p><p>2、像 ‘abs’、‘str’、‘eval’ 等内置函数也应该避免使用，防止出现在当前命名空间中被屏蔽的尴尬情况。</p><p>3、一些列的前缀和后缀。虽然在编程中非常常见，但事实上应该避免出现在函数和类名称中，比如 ‘object’、‘handle’、‘do’ 等词，这样做的原因是它们的含义模糊，摸棱两可，并且没有向实际名称中添加任何信息。</p><p>4、许多包的名称都应该被避免，诸如 ‘tools’、‘utils’、‘core’ 的名称很大可能会变成一大堆不相关的、质量非常差的代码片段，虽然它们在名称上并没有本质的错误，但为了防止问题的出现，还是直接将其作为自己自定义包的命名扼杀在萌芽状态为好。</p><h1 id="_3-functions" tabindex="-1"><a class="header-anchor" href="#_3-functions" aria-hidden="true">#</a> 3. Functions</h1><h2 id="_3-1-functions-should-be-verbs" tabindex="-1"><a class="header-anchor" href="#_3-1-functions-should-be-verbs" aria-hidden="true">#</a> 3.1. Functions should be verbs</h2><p>Functions and methods represent an action or actionable stuff.</p><p>Actions are clearly stated by verbs.</p><p>A few good examples from REAL projects I worked on before:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">get_orders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">acknowledge_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">get_delivery_information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A few bad examples:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">email_send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">api_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">specific_stuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>email_send</code> is more suitabe to use as a entity of a class.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>email_send<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;title&quot;</span>
email_send<span class="token punctuation">.</span>dispatch<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Exceptions to this rule are just a few but they exist.</p><ul><li>Creating a <code>main()</code> function to be invoked in the main entry point of your application is a good reason to skip this rule.</li><li>Using <code>@property</code> to treat a class method as an attribute is also valid.</li></ul><h2 id="_3-2-使用专业术语" tabindex="-1"><a class="header-anchor" href="#_3-2-使用专业术语" aria-hidden="true">#</a> 3.2. 使用专业术语</h2><p>这个算是第一条的延申，拒绝通用词，相反的使用特定领域特定的专业术语，比如下面的代码：</p><p>def calculation(datas): for data in datas: yield data ** 2 这部分代码的命名就有些问题，比如函数名 calculation 是计算的意思，计算分很多种，到底计算什么呢？这样很不直观，如果是换成下面这样：</p><p>def squares(numbers): for number in numbers yield number ** 2 这种的命名就比第一种清晰明了很多。</p><h1 id="_4-class" tabindex="-1"><a class="header-anchor" href="#_4-class" aria-hidden="true">#</a> 4. Class</h1><h2 id="_4-1-suffixes-are-fine" tabindex="-1"><a class="header-anchor" href="#_4-1-suffixes-are-fine" aria-hidden="true">#</a> 4.1. Suffixes are fine</h2><p>Always name it in <strong>singular</strong> instead of plural.</p><p>Prefer classes with self explanatory names. It&#39;s fine to have suffixes like <code>Service</code>, <code>Strategy</code>, <code>Middleware</code>.</p><p>Example of usage without suffix:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>email <span class="token operator">=</span> Email<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># inferred usage example</span>
email<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">&quot;Title&quot;</span>
email<span class="token punctuation">.</span>body <span class="token operator">=</span> create_body<span class="token punctuation">(</span><span class="token punctuation">)</span>
email<span class="token punctuation">.</span>send_to <span class="token operator">=</span> <span class="token string">&quot;guilatrova.dev&quot;</span>

send_email<span class="token punctuation">(</span>email<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you name it just as &quot;Email&quot;, its purpose is not clear. Someone might think it may represent an entity. So You should name it &quot;EmailSender&quot; or &quot;EmailService&quot;.</p><h2 id="_4-2-when-to-create-a-function-or-a-class-in-python" tabindex="-1"><a class="header-anchor" href="#_4-2-when-to-create-a-function-or-a-class-in-python" aria-hidden="true">#</a> 4.2. When to create a function or a class in Python?</h2><p>Consider the same storages module with 4 functions:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">format_for_debug</span><span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">save_debug</span><span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Prints in the screen&quot;&quot;&quot;</span>
    formatted_data <span class="token operator">=</span> format_for_debug<span class="token punctuation">(</span>some_data<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>formatted_data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">create_s3</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;Create s3 bucket if it doesn&#39;t exists&quot;&quot;&quot;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">def</span> <span class="token function">save_s3</span><span class="token punctuation">(</span>some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s3 <span class="token operator">=</span> create_s3<span class="token punctuation">(</span><span class="token string">&quot;bucket_name&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>I can see two groups of functions and no reason to keep them in different modules as they seem small, thus I&#39;d enjoy having them defined as classes:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">DebugStorage</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">format_for_debug</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">save_debug</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Prints in the screen&quot;&quot;&quot;</span>
        formatted_data <span class="token operator">=</span> self<span class="token punctuation">.</span>format_for_debug<span class="token punctuation">(</span>some_data<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>formatted_data<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">S3Storage</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">create_s3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> bucket<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&quot;&quot;&quot;Create s3 bucket if it doesn&#39;t exists&quot;&quot;&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">def</span> <span class="token function">save_s3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> some_data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        s3 <span class="token operator">=</span> self<span class="token punctuation">.</span>create_s3<span class="token punctuation">(</span><span class="token string">&quot;bucket_name&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here&#39;s a rule of thumb:</p><ul><li>Always start with functions</li><li>Grow to classes once you feel you can group different subsets of functions</li></ul>`,62),i=[o];function p(l,c){return s(),a("div",null,i)}const d=n(t,[["render",p],["__file","name.html.vue"]]);export{d as default};
