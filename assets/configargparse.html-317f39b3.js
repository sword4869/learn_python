import{_ as e,V as t,W as p,Y as n,Z as o,$ as i,X as s,D as c}from"./framework-48406333.js";const l={},u=s(`<ul><li><a href="#1-configargparse">1. configargparse</a><ul><li><a href="#11-instal">1.1. Instal</a></li><li><a href="#12-%E5%A4%B4">1.2. 头</a></li><li><a href="#13-unique-feature">1.3. unique feature</a><ul><li><a href="#131-config-file">1.3.1. config file</a></li><li><a href="#132-parse-string">1.3.2. parse string</a></li><li><a href="#133-format_values">1.3.3. format_values</a></li></ul></li><li><a href="#14-project-example">1.4. project example</a><ul><li><a href="#141-verbosity-%E5%88%86%E7%BB%84">1.4.1. verbosity 分组</a></li><li><a href="#142-%E5%B0%8F%E5%9E%8B%E9%A1%B9%E7%9B%AE">1.4.2. 小型项目</a></li><li><a href="#143-%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%86%E7%BB%84">1.4.3. 大型项目自定义分组</a></li></ul></li></ul></li></ul><h1 id="_1-configargparse" tabindex="-1"><a class="header-anchor" href="#_1-configargparse" aria-hidden="true">#</a> 1. configargparse</h1><h2 id="_1-1-instal" tabindex="-1"><a class="header-anchor" href="#_1-1-instal" aria-hidden="true">#</a> 1.1. Instal</h2><p>configargparse 是 argparse的 增强版， configargparse 完全支持所有argparse功能 ， 可以取代 argparse 。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> configargparse
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意：不是<code>configparser</code>，那是专门用来解析ini的。</p><p>可惜不能用 notebook执行，只能用py脚本。</p><h2 id="_1-2-头" tabindex="-1"><a class="header-anchor" href="#_1-2-头" aria-hidden="true">#</a> 1.2. 头</h2><blockquote><p>一样的ArgumentParser</p></blockquote><p>argparse</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> argparse
parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>configargparse</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> configargparse
parser <span class="token operator">=</span> configargparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>configargparse.ArgumentParser()</code>默认解读txt配置。</p><h2 id="_1-3-unique-feature" tabindex="-1"><a class="header-anchor" href="#_1-3-unique-feature" aria-hidden="true">#</a> 1.3. unique feature</h2><p>which <code>argparse</code> don&#39;t have.</p><h3 id="_1-3-1-config-file" tabindex="-1"><a class="header-anchor" href="#_1-3-1-config-file" aria-hidden="true">#</a> 1.3.1. config file</h3><p>默认的<code>ArgumentParser()</code> 直接就对 txt, ini, yaml格式都支持。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># python t.py --config &#39;some.txt&#39;</span>
<span class="token comment"># python t.py --config &#39;some.ini&#39;</span>
<span class="token comment"># python t.py --config &#39;some.yaml&#39;</span>

<span class="token keyword">import</span> configargparse
parser <span class="token operator">=</span> configargparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--config&#39;</span><span class="token punctuation">,</span> is_config_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;config file path&#39;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--num&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--no_cache&quot;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>

<span class="token comment"># Namespace(config=&#39;some.txt&#39;, num=1, no_cache=True)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># this is a comment
; this is also a comment (.ini style)
---            # lines that start with --- are ignored (yaml style)
-------------------
[section]      # .ini-style section names are treated as comments

# how to specify a key-value pair (all of these are equivalent):
num 1     # key is case sensitive: &quot;Num&quot; isn&#39;t &quot;num&quot;
num = 1   # (.ini style)  (white space is ignored, so num = 1 same as num=1)
num: 1    # (yaml style)
--num 1   # (argparse style)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>action=&quot;store_true&quot;的特殊效果，原本无论argparse和configargparse都无法对命令行参数下的<code>--no_cache True/False</code>进行解析<code>error: unrecognized arguments: True</code>，而通过config配置文件就可以做到显式赋值。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 可以 no_cache 表示 True，不写就 False
no_cache
--no_cache
# 此外，区别于命令行传参， 这里可以显示传值，允许 no_cache = True 和 no_cache = False
no_cache = True    # &quot;True&quot; and &quot;true&quot; are the same
no_cache = False   # &quot;False&quot; and &quot;false&quot; are the same
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 但和用命令行的一样，当\`default=True\`，无论赋值还是不赋值，结果都是True.
parser.add_argument(&quot;--no_cache&quot;, action=&#39;store_true&#39;, default=True)

no_cache
--no_cache
no_cache = True
no_cache = False
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-2-parse-string" tabindex="-1"><a class="header-anchor" href="#_1-3-2-parse-string" aria-hidden="true">#</a> 1.3.2. parse string</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> configargparse
parser <span class="token operator">=</span> configargparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--config&#39;</span><span class="token punctuation">,</span> is_config_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;config file path&#39;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--num&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--no_cache&quot;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>

cmd <span class="token operator">=</span> <span class="token string">&#39;--no_cache&#39;</span>
<span class="token comment"># 甚至还能融合config file。cmd = &#39;--config ./some.txt --no_cache&#39;</span>

parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
Namespace(config=None, no_cache=True, num=0)
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-3-format-values" tabindex="-1"><a class="header-anchor" href="#_1-3-3-format-values" aria-hidden="true">#</a> 1.3.3. format_values</h3><p>直接想要<code>parser.format_values()</code>，看似不用<code>args = parser.parse_args()</code>的返回值<code>args</code>。但是<code>parser.parse_args()</code>不仅只是返回参数，而且是一个初始化的过程。所以还得写。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> configargparse
parser <span class="token operator">=</span> configargparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--config&#39;</span><span class="token punctuation">,</span> is_config_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;config file path&#39;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--num&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--no_cache&quot;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--default_value&quot;</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--value&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>
parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--test&quot;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>


parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span>format_values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ python t.py <span class="token parameter variable">--config</span> some.txt <span class="token parameter variable">--test</span>
Command Line Args:   <span class="token parameter variable">--config</span> some.txt <span class="token parameter variable">--test</span>
Config File <span class="token punctuation">(</span>some.txt<span class="token punctuation">)</span>:
  num:               <span class="token number">1</span>
  no_cache:          <span class="token boolean">true</span>
Defaults:
  --default_value:   <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会打印来自命令行、配置文件、默认值的参数。然而，不在这三者的<code>value</code>就不会被打印。</p><h2 id="_1-4-project-example" tabindex="-1"><a class="header-anchor" href="#_1-4-project-example" aria-hidden="true">#</a> 1.4. project example</h2><h3 id="_1-4-1-verbosity-分组" tabindex="-1"><a class="header-anchor" href="#_1-4-1-verbosity-分组" aria-hidden="true">#</a> 1.4.1. verbosity 分组</h3><p>当显示帮助消息时，ArgumentParser 将 命令行 参数分组为 “positional arguments” 和 “optional arguments”</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 互斥</span>
group <span class="token operator">=</span> parser<span class="token punctuation">.</span>add_mutually_exclusive_group<span class="token punctuation">(</span><span class="token punctuation">)</span>
group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--verbose&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>
group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--quiet&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>
args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>

<span class="token keyword">if</span> args<span class="token punctuation">.</span>quiet<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;quiet form&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> args<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;long form&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;normal form&#39;</span><span class="token punctuation">)</span>


<span class="token triple-quoted-string string">&#39;&#39;&#39;
(fff) PS E:\\CodeProject\\Git\\rubbish&gt; python a.py --h
usage: a.py [-h] [--verbose | --quiet]

optional arguments:
  -h, --help  show this help message and exit
  --verbose
  --quiet
(fff) PS E:\\CodeProject\\Git\\rubbish&gt; python a.py 
hello Namespace(verbose=False, quiet=False)
normal form
(fff) PS E:\\CodeProject\\Git\\rubbish&gt; python a.py --quiet
hello Namespace(verbose=False, quiet=True)
(fff) PS E:\\CodeProject\\Git\\rubbish&gt; python a.py --verbose
hello Namespace(verbose=True, quiet=False)
long form
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-2-小型项目" tabindex="-1"><a class="header-anchor" href="#_1-4-2-小型项目" aria-hidden="true">#</a> 1.4.2. 小型项目</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> configargparse

<span class="token keyword">def</span> <span class="token function">config_parser</span><span class="token punctuation">(</span>cmd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> configargparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token comment"># config file</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--config&#39;</span><span class="token punctuation">,</span> is_config_file<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;config file path&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--with_depth&#39;</span><span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--batch_size&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--seed&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&quot;random seed for generating consistent images per prompt&quot;</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&quot;--lr_init&quot;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">0.02</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">&#39;learning rate&#39;</span><span class="token punctuation">)</span>    
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--model_name&#39;</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;TensorVMSplit&#39;</span><span class="token punctuation">,</span> choices<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;TensorVMSplit&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TensorCP&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> cmd <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

        
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># cmd = &#39;--config ./config.txt --with_depth&#39;</span>
    <span class="token comment"># args = config_parser(cmd)</span>
    args <span class="token operator">=</span> config_parser<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>

    <span class="token comment">#### 解系参数</span>
    <span class="token comment"># 根据是不是None而有不同的处理方案</span>
    <span class="token keyword">if</span> args<span class="token punctuation">.</span>seed <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">if</span>  args<span class="token punctuation">.</span>with_depth<span class="token punctuation">:</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>


    engine<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-3-大型项目自定义分组" tabindex="-1"><a class="header-anchor" href="#_1-4-3-大型项目自定义分组" aria-hidden="true">#</a> 1.4.3. 大型项目自定义分组</h3><p>定一个类, <code>__init__()</code>包办，生成实例就直接返回args。<code>args = Arguments().args</code></p>`,38),r={href:"https://github.com/derv82/wifite2/blob/master/wifite/args.py",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python</span>
<span class="token comment"># -*- coding: utf-8 -*-</span>

<span class="token keyword">from</span> <span class="token punctuation">.</span>util<span class="token punctuation">.</span>color <span class="token keyword">import</span> Color

<span class="token keyword">import</span> argparse<span class="token punctuation">,</span> sys

<span class="token keyword">class</span> <span class="token class-name">Arguments</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&#39;&#39;&#39; Holds arguments used by the Wifite &#39;&#39;&#39;</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> configuration<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># Hack: Check for -v before parsing args; so we know which commands to display.</span>
        self<span class="token punctuation">.</span>verbose <span class="token operator">=</span> <span class="token string">&#39;-v&#39;</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv <span class="token keyword">or</span> <span class="token string">&#39;-hv&#39;</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv <span class="token keyword">or</span> <span class="token string">&#39;-vh&#39;</span> <span class="token keyword">in</span> sys<span class="token punctuation">.</span>argv
        self<span class="token punctuation">.</span>config <span class="token operator">=</span> configuration
        self<span class="token punctuation">.</span>args <span class="token operator">=</span> self<span class="token punctuation">.</span>get_arguments<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_verbose</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>verbose<span class="token punctuation">:</span>
            <span class="token keyword">return</span> Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> argparse<span class="token punctuation">.</span>SUPPRESS

    <span class="token keyword">def</span> <span class="token function">get_arguments</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39; Returns parser.args() containing all program arguments &#39;&#39;&#39;</span>

        parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>usage<span class="token operator">=</span>argparse<span class="token punctuation">.</span>SUPPRESS<span class="token punctuation">,</span>
                formatter_class<span class="token operator">=</span><span class="token keyword">lambda</span> prog<span class="token punctuation">:</span> argparse<span class="token punctuation">.</span>HelpFormatter<span class="token punctuation">(</span>
                    prog<span class="token punctuation">,</span> max_help_position<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>_add_global_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}SETTINGS{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_wep_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}WEP{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_wpa_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}WPA{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_wps_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}WPS{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_pmkid_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}PMKID{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_add_command_args<span class="token punctuation">(</span>parser<span class="token punctuation">.</span>add_argument_group<span class="token punctuation">(</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;{C}COMMANDS{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>


    <span class="token keyword">def</span> <span class="token function">_add_global_args</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> glob<span class="token punctuation">)</span><span class="token punctuation">:</span>
        glob<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-v&#39;</span><span class="token punctuation">,</span>
            <span class="token string">&#39;--verbose&#39;</span><span class="token punctuation">,</span>
            action<span class="token operator">=</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span>
            default<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&#39;verbose&#39;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;Shows more options ({C}-h -v{W}). Prints commands and &#39;</span> <span class="token operator">+</span>
                <span class="token string">&#39;outputs. (default: {G}quiet{W})&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        
        <span class="token comment"># ...</span>

    <span class="token keyword">def</span> <span class="token function">_add_wep_args</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> wep<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># WEP</span>
        wep<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--wep&#39;</span><span class="token punctuation">,</span>
            action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&#39;wep_filter&#39;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;Show only {C}WEP-encrypted networks{W}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_add_wpa_args</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> wpa<span class="token punctuation">)</span><span class="token punctuation">:</span>
        wpa<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;--wpa&#39;</span><span class="token punctuation">,</span>
            action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">,</span>
            dest<span class="token operator">=</span><span class="token string">&#39;wpa_filter&#39;</span><span class="token punctuation">,</span>
            <span class="token builtin">help</span><span class="token operator">=</span>Color<span class="token punctuation">.</span>s<span class="token punctuation">(</span><span class="token string">&#39;Show only {C}WPA-encrypted networks{W} (includes {C}WPS{W})&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        wpa<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">&#39;-wpa&#39;</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span>argparse<span class="token punctuation">.</span>SUPPRESS<span class="token punctuation">,</span> action<span class="token operator">=</span><span class="token string">&#39;store_true&#39;</span><span class="token punctuation">,</span>
                dest<span class="token operator">=</span><span class="token string">&#39;wpa_filter&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> <span class="token punctuation">.</span>config <span class="token keyword">import</span> Configuration
    Configuration<span class="token punctuation">.</span>initialize<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token comment"># 这里调用</span>
    a <span class="token operator">=</span> Arguments<span class="token punctuation">(</span>Configuration<span class="token punctuation">)</span>
    args <span class="token operator">=</span> a<span class="token punctuation">.</span>args
    <span class="token keyword">for</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>__dict__<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        Color<span class="token punctuation">.</span>pl<span class="token punctuation">(</span><span class="token string">&#39;{C}%s: {G}%s{W}&#39;</span> <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function k(v,m){const a=c("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",r,[o("https://github.com/derv82/wifite2/blob/master/wifite/args.py"),i(a)])]),d])}const b=e(l,[["render",k],["__file","configargparse.html.vue"]]);export{b as default};
