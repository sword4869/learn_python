import{_ as n,V as s,W as a,X as t}from"./framework-48406333.js";const p={},e=t(`<ul><li><a href="#1-%E5%AD%97%E5%85%B8dict">1. 字典dict</a><ul><li><a href="#11-1%E5%AD%97%E5%85%B8%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89">1.1. 1.字典类型定义</a><ul><li><a href="#111-">1.1.1. {}</a></li><li><a href="#112-dict">1.1.2. dict()</a></li><li><a href="#113-dictfromkeys">1.1.3. dict.fromkeys()</a></li></ul></li><li><a href="#12-2%E5%AD%97%E5%85%B8%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E5%8F%8A%E6%96%B9%E6%B3%95">1.2. 2.字典处理函数及方法</a><ul><li><a href="#121-%E8%BF%94%E5%9B%9E%E5%AD%97%E5%85%B8d%E4%B8%AD%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%AA%E6%95%B0">1.2.1. 返回字典d中元素的个数</a></li><li><a href="#122-%E5%88%A4%E6%96%AD%E9%94%AEk%E6%98%AF%E5%90%A6%E5%9C%A8%E5%AD%97%E5%85%B8d">1.2.2. 判断键k是否在字典d</a></li><li><a href="#123-%E4%BF%AE%E6%94%B9%E5%AD%97%E5%85%B8">1.2.3. 修改字典</a></li><li><a href="#124-%E8%8E%B7%E5%8F%96%E5%80%BC">1.2.4. 获取值</a></li><li><a href="#125-%E8%BF%94%E5%9B%9E%E6%89%80%E6%9C%89%E4%BF%A1%E6%81%AF">1.2.5. 返回所有信息</a></li><li><a href="#126-%E5%88%A0%E9%99%A4">1.2.6. 删除</a></li><li><a href="#127-%E6%8B%B7%E8%B4%9D">1.2.7. 拷贝</a></li></ul></li></ul></li></ul><hr><h1 id="_1-字典dict" tabindex="-1"><a class="header-anchor" href="#_1-字典dict" aria-hidden="true">#</a> 1. 字典dict</h1><h2 id="_1-1-1-字典类型定义" tabindex="-1"><a class="header-anchor" href="#_1-1-1-字典类型定义" aria-hidden="true">#</a> 1.1. 1.字典类型定义</h2><p>理解映射：</p><ul><li><p>映射是一种键（索引）和值（数据）的对应</p></li><li><p>序列类型有0...N整数作为数据的默认索引</p></li></ul><p>字典类型：</p><p>（1）字典是键值对的集合，<strong>键值对之间无序</strong></p><p>（2）采用大括号<code>{}</code>和<code>dict()</code>创建，键值对用冒号<code>:</code>表示</p><p>（3）字典的键唯一，值可以相同。</p><p>格式：</p><p><code>&lt;字典变量&gt;={&lt;键1&gt;:&lt;值1&gt;,&lt;键2&gt;:&lt;值2&gt;}</code></p><p><code>&lt;字典变量&gt;[&lt;键&gt;]</code></p><p><code>&lt;字典变量&gt;[&lt;键&gt;]=&lt;值&gt;</code></p><h3 id="_1-1-1" tabindex="-1"><a class="header-anchor" href="#_1-1-1" aria-hidden="true">#</a> 1.1.1. {}</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 生成一个字典</span>
d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;中国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;美国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;华盛顿&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;法国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;巴黎&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># {&#39;中国&#39;: &#39;北京&#39;, &#39;美国&#39;: &#39;华盛顿&#39;, &#39;法国&#39;: &#39;巴黎&#39;}</span>
 
<span class="token comment"># []用来向字典变量中索引或增加元素</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token string">&quot;中国&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">#&#39;北京&#39;</span>
 
<span class="token comment"># 生成一个空的字典</span>
de <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &lt;class &#39;dict&#39;&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-2-dict" tabindex="-1"><a class="header-anchor" href="#_1-1-2-dict" aria-hidden="true">#</a> 1.1.2. dict()</h3><p>好处：方便直接从config文件或者命令行参数中copy</p><ul><li>引号 + 冒号<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;epochs&#39;</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token string">&#39;lr&#39;</span> <span class="token punctuation">:</span> <span class="token number">1e-4</span><span class="token punctuation">,</span>
    <span class="token string">&#39;batch_size&#39;</span> <span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    <span class="token string">&#39;ckpt_path&#39;</span> <span class="token punctuation">:</span> <span class="token string">&quot;checkpoint.pt&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>不需要引号 + 等号<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>b <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>
    epochs <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
    lr <span class="token operator">=</span> <span class="token number">1e-4</span><span class="token punctuation">,</span>
    batch_size <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span>
    ckpt_path <span class="token operator">=</span> <span class="token string">&quot;checkpoint.pt&quot;</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>数字作为键的问题</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>a <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;1&#39;</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment"># 2 3</span>

<span class="token comment"># 不可以以数字作为值</span>
<span class="token comment"># b = dict(1=2)</span>
<span class="token comment"># SyntaxError: expression cannot contain assignment, perhaps you meant &quot;==&quot;?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>zip</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python当打之年&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">]</span>
dic4 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-1-3-dict-fromkeys" tabindex="-1"><a class="header-anchor" href="#_1-1-3-dict-fromkeys" aria-hidden="true">#</a> 1.1.3. dict.fromkeys()</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">]</span>
dic1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
dic2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>list1<span class="token punctuation">,</span> <span class="token string">&#39;Python当打之年&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># dic1 = {&#39;Author&#39;: None, &#39;age&#39;: None, &#39;sex&#39;: None}</span>
<span class="token comment"># dic2 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: &#39;Python当打之年&#39;, &#39;sex&#39;: &#39;Python当打之年&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-2-2-字典处理函数及方法" tabindex="-1"><a class="header-anchor" href="#_1-2-2-字典处理函数及方法" aria-hidden="true">#</a> 1.2. 2.字典处理函数及方法</h2><h3 id="_1-2-1-返回字典d中元素的个数" tabindex="-1"><a class="header-anchor" href="#_1-2-1-返回字典d中元素的个数" aria-hidden="true">#</a> 1.2.1. 返回字典d中元素的个数</h3><ul><li><code>len(d)</code>：</li></ul><h3 id="_1-2-2-判断键k是否在字典d" tabindex="-1"><a class="header-anchor" href="#_1-2-2-判断键k是否在字典d" aria-hidden="true">#</a> 1.2.2. 判断键k是否在字典d</h3><p><code>k in d</code>：判断键k是否在字典d中，如何在返回True，否则返回False</p><h3 id="_1-2-3-修改字典" tabindex="-1"><a class="header-anchor" href="#_1-2-3-修改字典" aria-hidden="true">#</a> 1.2.3. 修改字典</h3><ul><li><code>&lt;字典变量&gt;[&lt;键&gt;]=&lt;值&gt;</code>: 新增或者修改。</li><li><code>d1.update(d2)</code>：如果被更新的字典中己包含对应的键-值对，那么原键-值对会被覆盖，如果被更新的字典中不包含对应的键-值对，则添加该键-值对</li></ul><p>删除：</p><ul><li><code>d.pop(k,&lt;default=None&gt;)</code>: 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。不指定默认值还是报错，<code>d.pop(&#39;中国1&#39;)</code>报错，<code>d.pop(&#39;中国1&#39;, 111)</code>返回111</li><li><code>d.popitem()</code>：弹出最后一个键值对，以元组形式返回。空则报错<code>KeyError: &#39;popitem(): dictionary is empty&#39;</code></li></ul><h3 id="_1-2-4-获取值" tabindex="-1"><a class="header-anchor" href="#_1-2-4-获取值" aria-hidden="true">#</a> 1.2.4. 获取值</h3><ul><li>没就报错，<code>KeyError: &#39;xxx&#39;</code><ul><li><code>&lt;字典变量&gt;[&lt;键&gt;]</code></li><li><code>d.popitem()</code>: 最后一个，且删除</li></ul></li><li>不报错，没就返回默认值： <ul><li><code>d.get(k,&lt;default=None&gt;)</code></li><li><code>d.pop(k,&lt;default=None&gt;)</code>: 且删除</li></ul></li></ul><h3 id="_1-2-5-返回所有信息" tabindex="-1"><a class="header-anchor" href="#_1-2-5-返回所有信息" aria-hidden="true">#</a> 1.2.5. 返回所有信息</h3><ul><li><p><code>d.item()</code>：返回字典d中所有键值对信息，<code>[(k,v), (k,v)]</code></p></li><li><p><code>d.keys()</code>：返回字典d中所有的键信息，<code>[k, k]</code></p></li><li><p><code>d.values()</code>：返回字典d中所有的值信息，<code>[v, v]</code></p></li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;中国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;美国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;华盛顿&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;法国&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;巴黎&quot;</span><span class="token punctuation">}</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># dict_items([(&#39;中国&#39;, &#39;北京&#39;), (&#39;美国&#39;, &#39;华盛顿&#39;), (&#39;法国&#39;, &#39;巴黎&#39;)])</span>
<span class="token comment"># dict_keys([&#39;中国&#39;, &#39;美国&#39;, &#39;法国&#39;])</span>
<span class="token comment"># dict_values([&#39;北京&#39;, &#39;华盛顿&#39;, &#39;巴黎&#39;])</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-6-删除" tabindex="-1"><a class="header-anchor" href="#_1-2-6-删除" aria-hidden="true">#</a> 1.2.6. 删除</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 删除字典的某个键值对        </span>
<span class="token keyword">del</span> d<span class="token punctuation">[</span><span class="token string">&#39;中国&#39;</span><span class="token punctuation">]</span>  
d<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">&#39;法国&#39;</span><span class="token punctuation">)</span> 
d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 清空字典所有键值对</span>
d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>      

<span class="token comment"># 删除字典</span>
<span class="token keyword">del</span> d          
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-7-拷贝" tabindex="-1"><a class="header-anchor" href="#_1-2-7-拷贝" aria-hidden="true">#</a> 1.2.7. 拷贝</h3><p><code>copy()</code> 用于返回一个字典的半深拷贝。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python当打之年&#39;</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">]</span>
dic1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">)</span>

dic2 <span class="token operator">=</span> dic1 <span class="token comment"># 浅拷贝: 引用对象</span>
dic3 <span class="token operator">=</span> dic1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 深拷贝父对象（一级目录），子对象（二级目录）不拷贝，还是引用</span>
dic1<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>

<span class="token comment"># dic1 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;男&#39;}</span>
<span class="token comment"># dic2 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 18, &#39;sex&#39;: &#39;男&#39;}</span>
<span class="token comment"># dic3 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 99, &#39;sex&#39;: &#39;男&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 dic2 是 dic1 的引用，所以输出结果是一致的，dic3 父对象进行了深拷贝，不会随dic1 修改而修改，子对象是浅拷贝所以随 dic1 的修改而修改，注意父子关系。</p><p>拓展深拷贝：copy.deepcopy()</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> copy

list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Author&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sex&#39;</span><span class="token punctuation">]</span>
list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Python当打之年&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">]</span>
dic1 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">)</span>

dic2 <span class="token operator">=</span> dic1
dic3 <span class="token operator">=</span> dic1<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
dic4 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>dic1<span class="token punctuation">)</span>
dic1<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>
dic1<span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>

<span class="token comment"># dic1 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 20, &#39;sex&#39;: &#39;男&#39;}</span>
<span class="token comment"># dic2 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: 20, &#39;sex&#39;: &#39;男&#39;}</span>
<span class="token comment"># dic3 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [99], &#39;sex&#39;: &#39;男&#39;}</span>
<span class="token comment"># dic4 = {&#39;Author&#39;: &#39;Python当打之年&#39;, &#39;age&#39;: [18, 99], &#39;sex&#39;: &#39;男&#39;}</span>
dic2 是 dic1 的引用，所以输出结果是一致的；dic3 父对象进行了深拷贝，不会随dic1 修改而修改，子对象是浅拷贝所以随 dic1 的修改而修改；dic4 进行了深拷贝，递归拷贝所有数据，相当于完全在另外内存中新建原字典，所以修改dic1不会影响dic4的数据

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;中国&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;美国&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;华盛顿&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;法国&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;巴黎&quot;</span><span class="token punctuation">}</span>


<span class="token comment">#### 键 key</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># dict_keys([&#39;中国&#39;, &#39;美国&#39;, &#39;法国&#39;])	    #可以for遍历</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;中国&quot;</span><span class="token keyword">in</span> d<span class="token punctuation">)</span>               <span class="token comment"># True</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;中国&quot;</span><span class="token keyword">in</span> d<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># True</span>

<span class="token comment">#### 值 value</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># dict_values([&#39;北京&#39;, &#39;华盛顿&#39;, &#39;巴黎&#39;])</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;北京&quot;</span><span class="token keyword">in</span> d<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment"># True</span>


<span class="token comment">#### 键值对</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> d<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 中国 北京</span>
<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">&#39;&#39;&#39;
中国 , 北京
美国 , 华盛顿
法国 , 巴黎
&#39;&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;中国&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;伊斯兰堡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;北京&#39;</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;巴基斯坦&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;伊斯兰堡&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># &#39;伊斯兰堡&#39;</span>
 
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># (&#39;法国&#39;, &#39;巴黎&#39;)</span>
<span class="token comment"># 增加相同元素会出现更新</span>
 
d<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
 
<span class="token comment"># 增加元素方法1：d[新增键]=新值</span>
d<span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 2}</span>
 
<span class="token comment"># 更新现象</span>
d<span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">3</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 3}</span>
 
<span class="token comment"># 增加元素方法2：d1.update(d2)</span>
d2<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">}</span>
d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>d2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 3}</span>
 
<span class="token comment"># 更新现象</span>
d3<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">}</span>
d<span class="token punctuation">.</span>update<span class="token punctuation">(</span>d3<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token comment"># {&#39;a&#39;: 1, &#39;b&#39;: 3, &#39;c&#39;: 9}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),c=[e];function i(o,l){return s(),a("div",null,c)}const d=n(p,[["render",i],["__file","dict.html.vue"]]);export{d as default};
