import{_ as t,V as o,W as p,Y as s,Z as n,$ as c,X as a,D as l}from"./framework-48406333.js";const i={},u=a(`<h1 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行" aria-hidden="true">#</a> 命令行</h1><h2 id="os库" tabindex="-1"><a class="header-anchor" href="#os库" aria-hidden="true">#</a> os库</h2><ul><li>库：<code>import os</code></li><li>使用命令：<code>os.system(&#39;&#39;)</code></li><li>缺点：每次使用一下<code>os.system(&#39;&#39;)</code>命令，就会弹出一个cmd窗口，然后执行完毕后关闭。如果多次使用的话，就很烦。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os

os<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="subprocess库" tabindex="-1"><a class="header-anchor" href="#subprocess库" aria-hidden="true">#</a> subprocess库</h2><ul><li>库：<code>import subprocess</code></li><li>使用命令：<code>subprocess.run(&#39;&#39;, shell=True)</code></li><li>特点： 解决<code>os</code>库的问题，cmd窗口静默后台执行，不会弹出来烦你。</li><li><code>Popen()</code>就不用学了，基本能干的用<code>run()</code>都能。</li></ul>`,6),r={href:"https://www.cnblogs.com/zhou2019/p/10582716.html",target:"_blank",rel:"noopener noreferrer"},d=a(`<h3 id="执行结果" tabindex="-1"><a class="header-anchor" href="#执行结果" aria-hidden="true">#</a> 执行结果</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

<span class="token comment"># 命令执行的结果是直接打在shell中</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
\`shell=True\`表示命令将通过shell执行（默认\`shell=False\`）.
shell=True是关键，不然就报错
返回CompletedProcess对象: CompletedProcess(args=&#39;ls&#39;, returncode=0)
&#39;&#39;&#39;</span>
subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

<span class="token comment"># 命令执行的结果没有打在shell中，而是以字节的形式返回命令执行的结果</span>
<span class="token triple-quoted-string string">&#39;&#39;&#39;
stdout=subprocess.PIPE， 我们就可以获取命令执行的结果
返回进程退出状态码 returncode，0表示success，其他表示失败。
&#39;&#39;&#39;</span>
ret <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>args<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>returncode<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
<span class="token comment"># ls 0 b&#39;LICENSE\\nREADME.md\\nREADME2.md\\nassets\\nbuild\\nconfigs\\ndata\\nenvironment.yaml\\nimages\\nlatent_diffusion.egg-info\\nldm\\nmain.py\\nmodels\\nnotebook_helpers.py\\nrequirements.txt\\nscripts\\nsetup.py\\nsrc\\n&#39;</span>
<span class="token comment"># success</span>
<span class="token keyword">if</span> ret<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;success&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="遇错停止程序" tabindex="-1"><a class="header-anchor" href="#遇错停止程序" aria-hidden="true">#</a> 遇错停止程序</h3><p><code>check_output()</code>属于老函数，作用:</p><ul><li>不用 <code>stdout=subprocess.PIPE</code>，直接返回字节形式的执行结果。</li><li>不像默认的<code>run(check=False</code>)碰到错误不停下来，<code>check_output()</code>碰到错误会抛出<code>CalledProcessError</code></li><li>我们可以用<code>subprocess.run</code>加个<code>check</code>参数来代替它。</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

<span class="token comment"># 直接返回字节形式的执行结果</span>
t <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">&quot;python -V&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
<span class="token comment"># b&#39;Python 3.9.13\\n&#39;</span>

<span class="token comment"># 碰到错误会抛出\`CalledProcessError\`</span>
subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token string">&quot;ls -2&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;wrong&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

<span class="token comment"># 抛出错误 CalledProcessError . 默认check=False</span>
subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;ls -2&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;wrong&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="将控制台输出写入到文件中" tabindex="-1"><a class="header-anchor" href="#将控制台输出写入到文件中" aria-hidden="true">#</a> 将控制台输出写入到文件中</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess
subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&#39;python tmp_py.py &gt;&gt; tmp_log.log&#39;</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

ret <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;tmp_log.log&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function k(v,m){const e=l("ExternalLinkIcon");return o(),p("div",null,[u,s("p",null,[n("PS："),s("a",r,[n("python之subprocess模块详解--小白博客"),c(e)])]),d])}const h=t(i,[["render",k],["__file","命令行.html.vue"]]);export{h as default};
