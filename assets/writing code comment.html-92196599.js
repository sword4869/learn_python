import{_ as e,V as t,W as a,X as i}from"./framework-48406333.js";const s={},n=i(`<ul><li><a href="#1-writing-code-comments">1. Writing code comments</a><ul><li><a href="#11-active-and-passive-voice">1.1. Active and passive voice</a></li><li><a href="#12-lazy-repeat">1.2. lazy repeat</a></li><li><a href="#13-business-purpose">1.3. business purpose</a></li><li><a href="#14-out-of-date">1.4. out-of-date</a></li><li><a href="#15-explain-unidiomatic-code">1.5. explain unidiomatic code</a></li><li><a href="#16-link-back-to-the-source">1.6. link back to the source</a></li></ul></li></ul><hr><h1 id="_1-writing-code-comments" tabindex="-1"><a class="header-anchor" href="#_1-writing-code-comments" aria-hidden="true">#</a> 1. Writing code comments</h1><h2 id="_1-1-active-and-passive-voice" tabindex="-1"><a class="header-anchor" href="#_1-1-active-and-passive-voice" aria-hidden="true">#</a> 1.1. Active and passive voice</h2><p>The actor comes first in an active voice. For example: &quot;CSS paints the background.&quot;</p><p>With a passive voice, the actor comes last. That means our actor — CSS in this case — comes at the end like this: &quot;The background is painted by CSS.&quot;</p><p>But that doesn’t mean you should always strive for an active voice. Switching from one to the other — even in the same paragraph — can make your content flow more seamlessly from one sentence to another if used effectively</p><h2 id="_1-2-lazy-repeat" tabindex="-1"><a class="header-anchor" href="#_1-2-lazy-repeat" aria-hidden="true">#</a> 1.2. lazy repeat</h2><p>Remember that the purpose of a comment is to add value to a piece of code, not to repeat it. What makes these examples &quot;lazy&quot; is that they merely restate what the code is obviously doing.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const age = 32 // Initialize \`age\` to 32

filter: blur(32px); /* Create a blur effect with a 32px radius */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Even it&#39;s ok not to write useless comments.</p><h2 id="_1-3-business-purpose" tabindex="-1"><a class="header-anchor" href="#_1-3-business-purpose" aria-hidden="true">#</a> 1.3. business purpose</h2><p>It does not describe the data structure on the surface of the code, but the business purpose behind the code.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function sortWords(citites){}   // sort words from A to Z

function sortWords(citites){}   // sort cities from A to Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>red *= 1.2 // Apply a &#39;reddish&#39; effect to the image
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_1-4-out-of-date" tabindex="-1"><a class="header-anchor" href="#_1-4-out-of-date" aria-hidden="true">#</a> 1.4. out-of-date</h2><p>David wants to sort a list of strings alphabetically from A to Z, so he does the obvious in JavaScript:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cities = sortWords(cities) // sort cities from A to Z
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>David then realizes that sortWords() actually sorts lists from Z to A. That’s not a problem, as he can simply reverse the output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cities = sortWords(cities) // sort cities from A to Z
cities = reverse(cities)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Unfortunately, David didn’t update his code comment.</p><p>Change your comments the same time you change the code.</p><h2 id="_1-5-explain-unidiomatic-code" tabindex="-1"><a class="header-anchor" href="#_1-5-explain-unidiomatic-code" aria-hidden="true">#</a> 1.5. explain unidiomatic code</h2><p>Sometimes, the natural way of doing things isn&#39;t right. Programmers might have to &quot;break&quot; the standards a bit, but when they do, it&#39; s advisable to leave a little comment explaining their rationale:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> function addSetEntry(set, value) {    
  /* Don&#39;t return \`set.add\` because it&#39;s not chainable in IE 11. */  
  set.add(value);
  return set;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If you were responsible for reviewing this code, you may have been tempted to correct it without that comment there explaining what&#39; s up.</p><h2 id="_1-6-link-back-to-the-source" tabindex="-1"><a class="header-anchor" href="#_1-6-link-back-to-the-source" aria-hidden="true">#</a> 1.6. link back to the source</h2><p>So, you just found a solution to your problem on StackOverflow. After copy-pasting that code, it’s sometimes a good thing to keep a link to the answer that helped you out so you can come back to it for future reference.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// Adds handling for legacy browsers
// https://stackoverflow.com/a/XXXXXXX
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,29),o=[n];function r(d,c){return t(),a("div",null,o)}const u=e(s,[["render",r],["__file","writing code comment.html.vue"]]);export{u as default};
