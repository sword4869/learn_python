import{_ as n,V as s,W as a,X as e}from"./framework-48406333.js";const t="/learn_python/assets/397f221a7d844a53f0ef87fd90da15f5d915c3f3dbd108dc970c4e9c6f18a337-397f221a.png",p={},o=e(`<ul><li><a href="#1-super%E5%88%9D%E5%A7%8B%E5%8C%96">1. super()初始化</a></li><li><a href="#2-%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95">2. 静态方法</a></li><li><a href="#3-%E6%8A%BD%E8%B1%A1%E7%B1%BB">3. 抽象类</a></li></ul><hr><h2 id="_1-super-初始化" tabindex="-1"><a class="header-anchor" href="#_1-super-初始化" aria-hidden="true">#</a> 1. super()初始化</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;animal init&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># animal init</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;name: </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

p <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">&#39;kitty&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># name: kitty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子类的初始化函数和父类的没什么区别，那么可以不用显式地写<code>super().__init__()</code>或者<code>super().__init__(*args)</code></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> person_name<span class="token punctuation">,</span> person_age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> person_name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> person_age

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> student_name<span class="token punctuation">,</span> student_age<span class="token punctuation">,</span> student_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>student_name<span class="token punctuation">,</span> student_age<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>studentId <span class="token operator">=</span> student_id
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>python 3 的 syntax 更简洁的等同替换：</p><ul><li>父类： <ul><li><code>class Person:</code></li><li><code>class Person():</code></li></ul></li><li>子类： <ul><li><code>super().__init__(student_name, student_age)</code>： <code>super()</code>中的可以省略<code>父类的名字</code>和<code>self</code>参数，因为Python会自动推断它们</li><li><code>Person.__init__(self, student_name, student_age)</code>: 这个<code>self</code>不能省略。</li><li>注意：前者<code>__init__()</code>中本来就没有<code>self</code>，后者<code>__init__()</code>本来就有。</li></ul></li></ul><p>python 2 的 syntax 等同替换（python3兼容python2的，反之不行）：</p><ul><li>父类： <code>class Person(object):</code>，任何类都必须继承<code>object</code></li><li>子类： <code>super(Student, self).__init__(student_name, student_age)</code>，必须指明父类。</li></ul><h2 id="_2-静态方法" tabindex="-1"><a class="header-anchor" href="#_2-静态方法" aria-hidden="true">#</a> 2. 静态方法</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@staticmethod</span>
    <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 没有 self</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span>

Animal<span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># Class</span>
Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hello<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-抽象类" tabindex="-1"><a class="header-anchor" href="#_3-抽象类" aria-hidden="true">#</a> 3. 抽象类</h2><blockquote><p>可以使用抽象类，可以不实现抽象类的方法</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">cat</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
a<span class="token operator">=</span>animal<span class="token punctuation">(</span><span class="token punctuation">)</span>    
c<span class="token operator">=</span>cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>不让实例化抽象类，<code>@abstractmethod</code>的抽象方法必须实现</p></blockquote><p><img src="`+t+`" alt="图 1"></p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABC<span class="token punctuation">,</span>abstractmethod
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>ABC<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;speak&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">pass</span>

c <span class="token operator">=</span> Cat<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>speak<span class="token punctuation">(</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>say_hello<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类方法或静态方法, 则应分别使用 <code>@abstractclassmethod</code> 和 <code>@abstractstaticmethod</code></p><p>另外，直接继承<code>ABC</code>也等同于指定元类<code>metaclass=ABCMeta</code>:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span>abstractmethod
<span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">say_hello</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">speak</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),c=[o];function l(i,u){return s(),a("div",null,c)}const k=n(p,[["render",l],["__file","class.html.vue"]]);export{k as default};
